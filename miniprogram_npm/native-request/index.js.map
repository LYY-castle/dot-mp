{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["`use strict`\r\n\r\nconst http = require('http');\r\nconst https = require('https');\r\nconst url = require('url');\r\n\r\nfunction getProtocol(path) {\r\n\treturn url.parse(path).protocol === \"http:\" ? http : https;\r\n}\r\n\r\n/**\r\n * Send a get request\r\n * @param path is the url endpoint\r\n * @param headers of the request\r\n * @param callback contains (error, body, status, headers)\r\n */\r\n function get(path, headers, callback) {\r\n \trequest(path, \"GET\", null, headers, callback);\r\n }\r\n\r\n/**\r\n * Send a post request\r\n * @param path is the url endpoint\r\n * @param headers of the request\r\n * @param callback contains (error, body, status, headers)\r\n * @param data a JSON Object or a string\r\n */\r\n function post(path, data, headers, callback) {\r\n \trequest(path, \"POST\", data, headers, callback);\r\n }\r\n\r\n/**\r\n * Send a custom request\r\n * @param path is the url endpoint\r\n * @param headers of the request\r\n * @param callback contains (error, statusCode, data)\r\n * @param data a JSON Object or a string\r\n * @param method is the protocol used like POST GET DELETE PUT etc...\r\n */\r\n function request(path, method, data, headers = '', callback) {\r\n \tif (typeof data === 'function') {\r\n \t\tcallback = data;\r\n \t\tdata = '';\r\n \t} else if (typeof headers === 'function') {\r\n \t\tcallback = headers;\r\n \t\theaders = {};\r\n \t} \r\n \tconst postData = typeof data === \"object\" ? JSON.stringify(data) : data;\r\n \tconst parsedUrl = url.parse(path);\r\n \tconst options = {\r\n \t\thostname: parsedUrl.hostname,\r\n \t\tport: parsedUrl.port,\r\n \t\tpath: parsedUrl.pathname +  (!!parsedUrl.search ? parsedUrl.search : ''),\r\n  \t\tmethod: method,\r\n \t\theaders: headers\r\n \t};\r\n \tconst req = getProtocol(path).request(options, function (response) {\r\n \t\thandleResponse(response, callback);\r\n \t});\r\n \treq.on('error', function (error) {\r\n \t\tcallback(error);\r\n \t\tconsole.error(error);\r\n \t});\r\n\t// Write data to request body\r\n\tif (method !== \"GET\")\r\n\t\treq.write(postData);\r\n\treq.end();\r\n}\r\n\r\nfunction handleResponse(response, callback) {\r\n\tlet body = '';\r\n\tconst status = response.statusCode;\r\n\tconst hasError = status >= 300;\r\n\tresponse.setEncoding('utf8');\r\n\tresponse.on('data', function (data) {\r\n\t\tbody += data;\r\n\t});\r\n\tresponse.on('end', function () {\r\n\t\tcallback(hasError ? body : null, hasError ? null : body, response.statusCode, response.headers);\r\n\t});\r\n}\r\n\r\nmodule.exports = {\r\n\tget,\r\n\trequest,\r\n\tpost\r\n};\r\n"]}